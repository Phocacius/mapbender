/** Frontend only */
/**
  Amend potentially undefined variables, if included directly from older template that doesn't define them.
  See libs/_variables.scss for full set.
 */

$accordionFontSize: 100% !default;
$accordionBackgroundColor: $buttonFirstColor !default;
$accordionTextColor: $lightFontColor !default;
$accordionActiveBackgroundColor: darken($buttonFirstColor, 10%) !default;
$accordionActiveTextColor: $lightFontColor !default;
$accordionHoverBackgroundColor: darken($buttonFirstColor, 5%) !default;

$sidepaneButtonFontSize: 100% !default;
$sidepaneButtonTextColor: $lightFontColor !default;
$sidepaneButtonBackgroundColor: $buttonFirstColor !default;
$sidepaneButtonBorderColor: darken($buttonSecondColor, 5%) !default;
$sidepaneButtonHoverColor: darken($buttonFirstColor, 5%) !default;
$sidepaneButtonActiveTextColor: $lightFontColor !default;
$sidepaneButtonActiveBackgroundColor: $buttonFirstActiveColor !default;

.tabContainer{
  .tabs {
    // Guarantee enough space so our tab.active can move up without clipping
    padding-top: 1px;
  }
  .tab, .container {
    border: 1px solid $thirdColor;
    background-color:$contentColor;
  }
  .tab{
    margin-right: -1px;
    color: $darkFontColor;
    cursor:pointer;
    line-height: 3;
    position: relative; // for z-index
    z-index:10;
    border-bottom: none;
    float:left;
    padding: 0 0.75em;;
    user-select: none;

    &.active {
      // Stretch up
      padding-top: 1px;
      margin-top: -1px;
      // Stretch down to cover container border
      padding-bottom: 3px;
      margin-bottom: -3px;
      z-index: 30;
    }
    &:hover, &:focus {
      outline: none;
    }
  }
  .container{
    clear:left;
    display:none;
    padding:$space;
    position:relative;
    z-index:20;
    border-top-width: 3px;
    &.active{display:block;}
  }
}

.tabContainerAlt, .accordionContainer {
  display: flex;
  flex-direction: column;
  height: 100%;
  width: 100%;
}
.tabContainerAlt > .tabs, .accordionContainer > .accordion {
  flex: 0 0 auto; // fixed size
}

.tabContainerAlt >.container,
.accordionContainer > .container-accordion {
  &:not(.active) {
    display: none;
  }
  flex: 1 1 auto; // grow and shrink
  width: 100%;
  overflow-y: auto;
  overflow-x: hidden;
  position: relative;
}
.tabContainerAlt >.container > *,
.accordionContainer > .container-accordion > .accordion-cell {
  // Extend content to fill entire accordion cell; this is a Hack helping nested absolte-positioned
  // content from overflowing natural size and creating a scrollbar (e.g. Layertree context menu)
  width: 100%;
  height: 100%;
  .sidePane & {
    position: absolute;
    top: 0;
    bottom: 0;
  }
}

.tabContainerAlt{
  > .tabs {
    list-style: none;
    border-bottom: dashed 1px $thirdColor;
    padding-bottom: $space;
    margin-bottom: $space;
  }
  .tab {
    @extend .buttonCore;
    display: inline-block;
    font-size: $sidepaneButtonFontSize;
    padding: 0.25em 10px;
    margin: 0 0.25em 0.25em 0;
    color: $sidepaneButtonTextColor;
    background-color: $sidepaneButtonBackgroundColor;
    border: 1px solid $sidepaneButtonBorderColor;

    &.active{
      cursor:default;
      color: $sidepaneButtonActiveTextColor;
      background-color: $sidepaneButtonActiveBackgroundColor;
    }
    body.desktop-template &:hover:not(.active) {
      background-color: $sidepaneButtonHoverColor;
    }
  }
  .container {
    // Undo Bootstrap margin + padding
    // @Å§odo: if we want nothing from Bootstrap .container, we should not add Bootstrap .container
    margin: 0;
    padding: 0;
  }
}

.tabContainer .container, .tabContainerAlt .container {
  width: auto;  // overrule Bootstrap .container (which has varying width depending on screen size)
}

.accordionContainer {
  .accordion{
    user-select: none;
    cursor: pointer;
    padding: 5px 0.5em;
    font-size: $accordionFontSize;
    color: $accordionTextColor;
    background-color: $accordionBackgroundColor;
    &.active {
      color: $accordionActiveTextColor;
      background-color: $accordionActiveBackgroundColor;
    }
    body.desktop-template &:hover:not(.active) {
      background-color: $accordionHoverBackgroundColor;
    }
  }
  .container-accordion {
    .accordion-cell {
      padding-top: $space / 2;
    }
  }
  // spacing between consecutive content blocks
  .container-accordion + .accordion {
    margin-top: 2px;
  }
}
